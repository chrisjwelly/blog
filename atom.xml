<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Christian&#39;s blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://chrisjwelly.github.io/blog/"/>
  <updated>2022-01-06T07:21:49.361Z</updated>
  <id>https://chrisjwelly.github.io/blog/</id>
  
  <author>
    <name>Christian James Welly</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Career Progression: CS3230 TA</title>
    <link href="https://chrisjwelly.github.io/blog/2022/01/05/Career-Progression-CS3230-TA/"/>
    <id>https://chrisjwelly.github.io/blog/2022/01/05/Career-Progression-CS3230-TA/</id>
    <published>2022-01-05T13:10:21.000Z</published>
    <updated>2022-01-06T07:21:49.361Z</updated>
    
    <content type="html"><![CDATA[<!--toc--><h2 id="Introduction-and-Motivation"><a href="#Introduction-and-Motivation" class="headerlink" title="Introduction and Motivation"></a>Introduction and Motivation</h2><p>Around 1.5 years ago, when I was <a href="https://chrisjwelly.github.io/blog/2020/08/08/The-CS2040S-teaching-experience/">teaching CS2040S</a>, I once joked with my students that since I taught CS1101S and CS2040S, a natural career progression would be to teach CS3230 next. I truly meant it as a joke, but little did I know back then that I would eventually go on to do it.</p><p><a href="https://nusmods.com/modules/CS3230/design-and-analysis-of-algorithms">CS3230 Design and Analysis of Algorithms</a> was taught by Prof Arnab Bhattacharrya in the recent semester (AY21/22 Sem 1). The module is part of the graduation requirements for computer science majors, and I believe computer engineering majors have the option to take this module to fulfill their requirements. It builds on CS2040S, providing more advanced tools and techniques to design (divide &amp; conquer, greedy, dynamic programming) and analyse (amortisation, randomised analysis) algorithms. Theoretical content such as the famous “P vs NP” problem is also briefly touched upon.</p><p>I was initially not even thinking of teaching the module. How it came to be was that my previous CS3230 tutor was offered by Prof Arnab to teach, but he could not due to his commitments. My tutor then asked if I would be willing to teach in his place. I happened to have sat in Prof Arnab’s other classes before, and felt like I could be confident in the quality of his teaching (which was a complaint for other instructors in previous semesters). Moreover, I also have gained confidence in my own abilities over the semesters. Lack of confidence was one of the reasons I had not taken it up sooner. The final reason was because in the same semester, I was going to take CS5234 Algorithms at Scale. I thought CS3230 would be a good way for me to revise my fundamentals as well. A little fun fact is that when I taught CS1101S, I took CS2040S. When I taught CS2040S, I took CS3230. Then when I taught CS3230, I took CS5234. It’s almost as if I taught things in order to solidify my fundamentals in the same semester. All things considered, I decided that it would be a good time and opportunity for me to take up the role.</p><a id="more"></a><h2 id="The-teaching-experience"><a href="#The-teaching-experience" class="headerlink" title="The teaching experience"></a>The teaching experience</h2><p>Compared to my previous experience teaching CS1101S and CS2040S, there are some notable differences this time. I have 18 students for the previous modules I taught combined. This time, I am teaching a total of 47 students. Moreover, I am teaching two 1-hour slots a week, rather than one 2-hour slot. This meant more students I am in-charge of, but less time to engage them. </p><p>I opted not to do any grading. From my past experiences, grading is a huge time sink and quite a thankless job. So I did indicate in advance that I very much preferred to do teaching only, and I was fortunate to be granted that.</p><p>It should also be noted that this section is meant as my thoughts on my teaching experience, and it should not serve as a reflection of the difficulty of the module content.</p><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><p>Despite having an increased confidence in teaching the module, I still had concerns in whether I can do it well. During the break before the semester started, I took the opportunity to revise the module content. The primary material I visited was MIT’s own Design and Analysis of Algorithms course, <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/">6.046J</a>, which is available on MIT OpenCourseWare. The material there is slightly more advanced and covers more than the NUS counterpart, so I only watched the relevant material. I was juggling all these with my summer internship, so I typically allocated 1.5 hours before my internship started, and another 1.5 hours at the end of the day. I used this time to watch the lecture and recitation videos, and I also attempted their assignment questions. I managed to consistently do this almost every day for 3-4 weeks, after which I unfortunately became less consistent. Though looking back again, I covered half of the 6.046J syllabus, which is nearly all of CS3230. So I suppose it was fine. It was good revision, and eventually I would occasionally link the relevant material at the end of my tutorials.</p><p>There were other supplementary materials as well. I perused the textbook <a href="https://en.wikipedia.org/wiki/Introduction_to_Algorithms">CLRS</a> (which 6.046J uses too) before and throughout my teaching. I had hoped to attempt some of the exercises, but time is always an issue. I also found <a href="https://www.cs.princeton.edu/~wayne/kleinberg-tardos/">Algorithm Design by Kleinberg and Tardos</a> to be a nifty resource, and it particularly helped me for the NP-completeness chapters. I personally found the NP-completeness chapter in CLRS to be more demanding than what CS3230 requires, so I sought out other resources and I think this textbook has the right amount of rigour.</p><h3 id="Teaching-CS3230-with-slides"><a href="#Teaching-CS3230-with-slides" class="headerlink" title="Teaching CS3230 with slides"></a>Teaching CS3230 with slides</h3><p>As per the previous semesters, my teaching style revolves around the use of my own slides (it can be found <a href="https://tinyurl.com/cs3230-ay2122s1-christian">here</a>, but note that content differs across semesters). I elaborated on what’s on my mind when preparing slides in a <a href="https://chrisjwelly.github.io/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/#1-1-Material-Preparation">previous blog post</a>. But briefly, I prepare slides so that students can refer to it again in the future, and in order to allow me to be organised in my thoughts when teaching. Specific to CS3230, I didn’t quite like the slides that were officially distributed, so I sought to improve on it whenever I could.</p><p>However, unlike CS1101S and CS2040S, CS3230 tends to be more mathematical in nature. This is a new challenge for me in how to best deliver the content. Google Slides has almost zero support for mathematical content. Typesetting nicely is almost impossible. My clunky solution to this is to use LaTeX to produce the mathematical content that I need, or handwrite it on my iPad. I would then take screenshots and put it on my slides. One thing that I disliked in presentations involving maths is how people tend to put all the content in a single slide. I took care to add some animation and to explain step-by-step. I generally keep in mind that I am “presenting” the answers, rather than just “showing” them. If I did not take care to improve on the presentation, then I might as well just simply release the answers for students to read. </p><img src="/blog/2022/01/05/Career-Progression-CS3230-TA/answer-presentation.png" class="" title="Step-by-step presentation"><p>Another thing I always take into consideration is how people either have short attention spans or simply do not remember what was discussed prior. This can be something as simple as forgetting what were the options to a multiple choice question. Whenever appropriate, I would always take snippets of relevant information from a previous slide and put it in one corner of the current slide. This might clutter the current slide and as such I handled it by putting such information in lighter colour, so that it doesn’t unnecessarily grab attention. The example below just shows the question statement posted in lighter colour.</p><img src="/blog/2022/01/05/Career-Progression-CS3230-TA/relevant-info-lighter-colour.png" class="" title="Showing some relevant information in lighter colour"><p>I also made an effort to be visual whenever I can, including the appropriate colour treatment. A slide with purely text can be very boring and unengaging. Whenever a visual illustration helps, I would take the effort to make it available. If not, I would also try to engage the audience with some memes. One of my proudest works is the illustration of a reduction from 3-SAT to Directed Hamiltonian Cycle. It is visually complicated which makes it difficult to be drawn by hand, so I think preparing it in my slides is worth the effort. </p><img src="/blog/2022/01/05/Career-Progression-CS3230-TA/dir-ham-cycle-reduction.png" class="" title="Diagram to illustrate the reduction from 3-SAT to Directed Hamiltonian Cycle"><p>All these preparations took a lot of time. In some weeks, I stayed up to 4-5AM just to prepare them. I do estimate that I can spend from 6 to 10 hours a week just preparing slides. Almost all of my weeks have over 100 slides, with the most being up to ~170 slides. I am personally very satisfied and proud with the work I have done preparing the slides. It may have been a lot of work, but I am preparing for at least 47 students; that is a huge responsibility. Later on in the semester, I have received several emails asking for access to my slides as well. It really makes me happy that people find it helpful!</p><img src="/blog/2022/01/05/Career-Progression-CS3230-TA/slides-request.png" class="" title="E-mail of a student not in my class requesting for slides"><h3 id="The-online-tutorial"><a href="#The-online-tutorial" class="headerlink" title="The online tutorial"></a>The online tutorial</h3><p>Due to COVID-19, all the tutorials were online. It was my first time doing a fully-online teaching, so I was a little nervous too. As mentioned earlier, I taught 2 slots: one on Thursday, and one on Friday. While I do know some tutors prefer teaching back-to-back, I personally found it helpful not to. First of all, I could conduct a consultation session after each slot in order to give clarity when needed. Second of all, it gives me time to reflect and improve for the later slot. This was immensely useful since most of my slides were new. There were even occasions when students caught major typos in my slides, which I fixed for the next class. (I feel slightly bad for the earlier class though, my apologies!)</p><p>In the first class of the semester, I had asked people to turn on their cameras so I could at least see them. This was not sustainable, but it did not affect teaching so much. Still, I ended the semester not knowing how most of my students looked like. Once in school I joked with a friend that I could be walking past any of them without knowing, and an hour later I actually passed one of the students I happened to recognise. But I digress about tutorials.</p><p>Roughly how I conduct my tutorials is by giving a recap of the relevant topic for the tutorial, and then going through the assigned questions. The challenge here is that I only have a 1-hour slot, which means I should only spend around 50 minutes of contact time. I considered giving less of the recap, but I notice most students wouldn’t have done the tutorial anyway, and some people actually depended on my recaps. So I decided that it was worth the time. </p><p>When going through the questions, we use this platform called Archipelago. Students can key in their answers into the platform. I personally view it as the primary form of engagement, which can give me signals whether people are understanding the content, or whether I should take more time to slow down and explain further. Giving students the time to think about the question might take away a lot of time for the tutorials, but I think it is helpful in the long run as students exercise their thinking a little bit more.</p><p>One thing I learned to be helpful was to stop frequently and to ask students to use the “thumbs-up” feature in Zoom. This really allowed me to gauge whether people understood what I just said or not. There were times when the signals hinted to me that I should repeat whatever I had just said.</p><p>I personally think the advantage of having online tutorials is being able to record the tutorials. I was initially afraid that it would mean less engagement in class, but to my pleasant surprise I still felt that the engagement was sufficient. Initially, I simply compiled all the recording links in one place that point to the Zoom recording. However, I received feedback about how the Zoom UI is rather suboptimal, so I eventually hosted them on YouTube as well. This is also helpful for future references, as I am unsure whether Zoom will be able to host the videos forever. For those interested, the playlist of my tutorials can be found <a href="https://youtube.com/playlist?list=PL05ri2Yh409oa4OZmwLJze2O3IDHZyKFH">here</a>.</p><p>Since tutorials are also online and I get less chance to interact with the students, one thing I tried to do to make class slightly more exciting is to play random videos before the start of the class. Here are a few samplers (no rickrolls, I promise): sample <a href="https://www.youtube.com/watch?v=ih9zBLDr_ro">one</a>, <a href="https://www.youtube.com/watch?v=miomuSGoPzI">two</a> and <a href="https://www.youtube.com/watch?v=V3uP7TtDeFc">three</a>. I suppose I just didn’t want the wait before class starting to be awkward. Most of the time, no one said anything about it, except for that one time someone expected a funny video when I was playing a serious video for once. At the end of the semester, someone also commented that he would miss the random videos I play before class. That’s nice!</p><p>A lot of things went relatively well, but much can be improved on. As for a personal reflection, I typically always either end on time, or overrun my classes. This is a consequence of having a detailed recap session, and attempting to go through the questions in more detail. Fortunately, the session is recorded so I could use it as a guarantee that students are not missing out. Punctuality is something I will try to work on in the future, and honestly I had expected this to be raised up in my teaching feedback. Surprisingly, no one raised it up. I am unsure as to what it might suggest – are students okay with me overrunning it a bit? Or perhaps they simply do not mind?</p><h3 id="Miscellaneous-materials"><a href="#Miscellaneous-materials" class="headerlink" title="Miscellaneous materials"></a>Miscellaneous materials</h3><p>I also prepared some miscellaneous materials. One thing I did was to prepare a math prerequisite revision material. I understood that many of the students might have forgotten some of the discrete mathematics and algorithms that they learnt as a first-year undergraduate, so I decided to take the initiative to prepare the material accompanied by a video recording. I would think that the <a href="https://youtu.be/RdAAknALqjs">video</a> was quite well-received. At the time of writing, it has 576 views and 37 likes. Pretty decent numbers, I think.</p><p>I also prepared additional material to go through content related to indicator random variables. It is a tool that is used to analyse randomised algorithms, and I notice that it can follow a rather fixed pattern. </p><p>Initially, I meant to only share both of these materials to my tutorial groups, but upon mention of these materials to the teaching staff, Prof Arnab recommended that I release it for the cohort’s perusal. I’d like to think that it was worth doing so!</p><h3 id="Outside-class"><a href="#Outside-class" class="headerlink" title="Outside class"></a>Outside class</h3><p>My personal fear when I was getting ready to manage 47 students was the interaction outside class. I was expecting a lot of private messages, and maybe requests for consultations as well. </p><p>Personally it was not as bad as I imagined. I only met 1 or 2 students regularly for consultation outside my after-class hours. As for questions (via PMs) outside class, there were slightly more: perhaps around 5 people who regularly asked me questions? Not that bad. I also learnt to manage my own time and set boundaries better, so it was manageable in the end.</p><p>I initially attempted a policy where I will not answer questions 48 hours before the assignment deadline / exams. In the end, I could not bring myself to enforce it except for their midterm, since I also had quite a number of midterms to sit for. I’m still not sure how this policy is viewed by them, but I do think that they tend to forget its existence anyway. </p><p>During recess and reading weeks, I took the effort to give additional consultation hours as I am sure they would have studied the material more closely and had questions. I ran one 1.5 hr session in recess week, and two 1.5 hr sessions in reading week. Attendance was decent, but I typically spend a considerable amount of time answering one question in detail. I wonder if some of the questions were left out as a consequence of this. </p><p>Again, another nice thing about conducting all these online is that I could record them and timestamp some of the things I covered. At the very least, if someone else has the same question, I could save some time and redirect them to my video recording of consultations. I also took care to save the notes during consultation (I use GoodNotes on iPad), which they can refer to if needed.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Overall, I enjoyed being a CS3230 TA this recent semester. Doing CS3230 preparation work is actually like therapy for me when I am too lazy to do work that I am supposed to do, like my own modules. Oops. I suppose it is as such because I know what I should be doing in CS3230, it is just a lot of work. Whereas my own module is where I learn new things and had to struggle a bit more.</p><p>I personally do think that CS3230 is not an easy module. It requires more-than-average mathematical maturity, and I do try my best to make the content as accessible as possible. I received some thank-you emails from people not even from my class and these are little things that motivate me to keep moving forward! Nothing makes me happier than to hear that people are benefitting from the effort I put in to deliver the content.</p><img src="/blog/2022/01/05/Career-Progression-CS3230-TA/thank-you-email.png" class="" title="A thank-you email by a student"><p>Of course, I have to thank my own students as well! Thank you for patiently bearing with my teachings. I think I received pretty good feedback from them, but I will continue thinking of ways to improve! We took a class photo over Zoom on our final tutorial! Funnily enough, it was the first time I saw some of them, hahaha</p><img src="/blog/2022/01/05/Career-Progression-CS3230-TA/cs3230-tut07-ay2122s1.jpg" class="" title="CS3230 AY21&#x2F;22 S1 (Tut 07)"><img src="/blog/2022/01/05/Career-Progression-CS3230-TA/cs3230-tut13-ay2122s1.jpg" class="" title="CS3230 AY21&#x2F;22 S1 (Tut 13)"><p>One more semester of university left, and I decided to teach CS3230 one more time! Hopefully, I get to do an even better job this coming semester!</p>]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h2 id=&quot;Introduction-and-Motivation&quot;&gt;&lt;a href=&quot;#Introduction-and-Motivation&quot; class=&quot;headerlink&quot; title=&quot;Introduction and Motivation&quot;&gt;&lt;/a&gt;Introduction and Motivation&lt;/h2&gt;&lt;p&gt;Around 1.5 years ago, when I was &lt;a href=&quot;https://chrisjwelly.github.io/blog/2020/08/08/The-CS2040S-teaching-experience/&quot;&gt;teaching CS2040S&lt;/a&gt;, I once joked with my students that since I taught CS1101S and CS2040S, a natural career progression would be to teach CS3230 next. I truly meant it as a joke, but little did I know back then that I would eventually go on to do it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nusmods.com/modules/CS3230/design-and-analysis-of-algorithms&quot;&gt;CS3230 Design and Analysis of Algorithms&lt;/a&gt; was taught by Prof Arnab Bhattacharrya in the recent semester (AY21/22 Sem 1). The module is part of the graduation requirements for computer science majors, and I believe computer engineering majors have the option to take this module to fulfill their requirements. It builds on CS2040S, providing more advanced tools and techniques to design (divide &amp;amp; conquer, greedy, dynamic programming) and analyse (amortisation, randomised analysis) algorithms. Theoretical content such as the famous “P vs NP” problem is also briefly touched upon.&lt;/p&gt;
&lt;p&gt;I was initially not even thinking of teaching the module. How it came to be was that my previous CS3230 tutor was offered by Prof Arnab to teach, but he could not due to his commitments. My tutor then asked if I would be willing to teach in his place. I happened to have sat in Prof Arnab’s other classes before, and felt like I could be confident in the quality of his teaching (which was a complaint for other instructors in previous semesters). Moreover, I also have gained confidence in my own abilities over the semesters. Lack of confidence was one of the reasons I had not taken it up sooner. The final reason was because in the same semester, I was going to take CS5234 Algorithms at Scale. I thought CS3230 would be a good way for me to revise my fundamentals as well. A little fun fact is that when I taught CS1101S, I took CS2040S. When I taught CS2040S, I took CS3230. Then when I taught CS3230, I took CS5234. It’s almost as if I taught things in order to solidify my fundamentals in the same semester. All things considered, I decided that it would be a good time and opportunity for me to take up the role.&lt;/p&gt;
    
    </summary>
    
    
      <category term="University" scheme="https://chrisjwelly.github.io/blog/categories/University/"/>
    
    
      <category term="teaching" scheme="https://chrisjwelly.github.io/blog/tags/teaching/"/>
    
      <category term="university" scheme="https://chrisjwelly.github.io/blog/tags/university/"/>
    
      <category term="CS2040S" scheme="https://chrisjwelly.github.io/blog/tags/CS2040S/"/>
    
      <category term="data structures" scheme="https://chrisjwelly.github.io/blog/tags/data-structures/"/>
    
      <category term="algorithms" scheme="https://chrisjwelly.github.io/blog/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Binary Searching bugs with Git Bisect</title>
    <link href="https://chrisjwelly.github.io/blog/2021/08/03/binary-searching-bugs-with-git-bisect/"/>
    <id>https://chrisjwelly.github.io/blog/2021/08/03/binary-searching-bugs-with-git-bisect/</id>
    <published>2021-08-03T07:03:28.000Z</published>
    <updated>2021-08-04T05:04:32.550Z</updated>
    
    <content type="html"><![CDATA[<!--toc--><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The time is 7PM. Your software project is due at 11:59PM. You have yet to write the developer guide to document your software which is part of the submission. You are writing a testing plan which also serves as a guide for your graders to assess your software. As you were writing the steps to test, you discovered a regression. This feature that was working just 3 hours ago is now causing the application to crash! What happened? What would you do?</p><p>I was in this exact situation recently for a school project. I had to decide whether it was worth identifying this bug and writing a patch for it (and potentially breaking other features for whatever reason it might be), or whether I should continue with the rest of the submission documents. I panicked really hard. In that moment of desperation, from a deep region in my memory, I suddenly recalled: <code>git bisect</code>.</p><p>I had known the principle of <code>git bisect</code> – it essentially performs a binary search for the first commit which caused a particular bug. It was going to be the first time I was using it. I quickly looked up tutorials and documentation online. 10 minutes later, I found the commit which caused the bug. Quickly patched it up (whether there were further bugs is another story altogether), and went back to writing my other submission documents.</p><p>In that one usage, <code>git bisect</code> easily became my favourite git command. In this post, I hope to provide a simple use case and guide to use <code>git bisect</code>, while demonstrating how fast it can help you identify the violating commit.</p><p>A basic understanding of data structures and algorithms (array/linked lists and linear/binary search) and git (e.g. committing, checking-out commits) is preferred, but I think the concepts are intuitive enough and I will try to make it as accessible as I can.</p><a id="more"></a><h2 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h2><p>Let us recall the concept of linear and binary search in the context of an array.</p><h3 id="Linear-Search"><a href="#Linear-Search" class="headerlink" title="Linear Search"></a>Linear Search</h3><p>The strategy is pretty simple - you will look up the element that you want in the array one-by-one:</p><img src="/blog/2021/08/03/binary-searching-bugs-with-git-bisect/linearsearch.png" class="" title="Linear Search visualisation"><h3 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h3><p>Algorithm classes in school would usually teach the concept of binary search in the context of a sorted array. The idea is as follows:</p><ol><li>Look at the “middle” element and make a comparison.</li><li>If that “middle” element is exactly the one you are looking for, return <code>true</code> (or its index). If what you are searching for is bigger than the middle element, discard ALL the values smaller than that element including itself<sup>1</sup> and vice versa. </li><li>Repeat this process until you have found the desired element or have no elements left.</li></ol><p>The following diagram shows a binary search in action:</p><img src="/blog/2021/08/03/binary-searching-bugs-with-git-bisect/binarysearch.png" class="" title="Binary Search visualisation"><p>The time complexity of a binary search is O(log(n)), where n is the number of elements in the array. This is way faster (exponentially faster, to be precise) than a linear search which takes time complexity O(n).</p><p>For reference, log<sub>2</sub>(1024) = 10 and log<sub>2</sub>(2048) = 11. This can be interpreted as it takes around 10 and 11 times of this “comparing with middle element” procedure described above if we are given an array of 1024 and 2048 respectively, before binary search terminates. In a linear search, we will need to do around 1024 and 2048 element-by-element inspections respectively.</p><p>I would like to note that binary search is a concept that is not just applicable to a sorted array. It is also applicable in the context of a monotonic function f(x) - where as x increases, f(x) will either stay the same or increase (correspondingly, decrease). Binary search is typically used to find the smallest (or largest) value satisfying some condition in a monotonic function. </p><p>It can also be used to find the “leftmost” value. In the case of binary searching on a sorted array, this can be thought of having duplicate elements and you are finding the “leftmost” value among duplicates of that value. This is precisely the concept of <code>git bisect</code> which I will introduce in a bit.</p><h2 id="Using-this-concept-in-Git"><a href="#Using-this-concept-in-Git" class="headerlink" title="Using this concept in Git"></a>Using this concept in Git</h2><p>In this post, let us concern ourselves with only regular commits, and not discuss merge commits. In this scenario, a commit history is essentially a linked list<sup>2</sup> of commits as one can see here:</p><img src="/blog/2021/08/03/binary-searching-bugs-with-git-bisect/gitcommits.png" class="" title="Visualisation of git commits"><p>Thus, when presented with the scenario in the introduction, it might be natural for you to perform a linear search on the commit history. That is, you do a <code>git checkout &lt;commit hash&gt;</code> one-by-one down the history, until you encounter a commit where the bug does not occur. The previous commit is then the first occurrence of the bug. Of course, if you have your suspicions on which commit causes the bug, you can avoid doing a linear search entirely and just checkout there. But in this context, let’s suppose we have absolutely no idea what happened!</p><p><code>git bisect</code> takes this concept in a binary search<sup>3</sup> setting:</p><ol><li>It will ask you to give a range. Give it a commit where the bug has occurred, and another commit where the bug has not occurred.</li><li>It will perform a binary search by performing a <code>checkout</code> on the middle commit of the range, asking your feedback whether it was a good or bad commit.</li><li>It will then halve the range appropriately, until it pinpoints the exact commit where the bug first occurred.</li></ol><p>Here is a rough visualisation, think of <code>mid</code> as the position that Git automatically checks-out to for you:</p><img src="/blog/2021/08/03/binary-searching-bugs-with-git-bisect/gitbisect.png" class="" title="Visualisation of git bisect"><p>Going back to our theory, you can think of the good commits as having the value of “0”, and bad commits as having the value of “1”. Thus, it is like we are having an array of “0”s followed by “1”s, and we are searching for the “leftmost” 1 (which is the first bad commit).</p><h2 id="Demo-with-Git-Bisect"><a href="#Demo-with-Git-Bisect" class="headerlink" title="Demo with Git Bisect"></a>Demo with Git Bisect</h2><p>For now, enough theory. To illustrate the power of Git Bisect and how fast it can sift through the commit history, I have prepared this repository: <a href="https://github.com/chrisjwelly/git-bisect-demo">https://github.com/chrisjwelly/git-bisect-demo</a> for a demo. What I have is very simple:</p><ul><li>A commit history of around 1024 commits</li><li>Two files: <code>good.txt</code> and <code>bad.txt</code></li></ul><p>Let us pretend that <code>bad.txt</code> is a bug that was introduced in the middle of development. We want to find the commit that first introduced this <code>bad.txt</code> file using <code>git bisect</code>.</p><p>(Now, I am aware that there are easier ways than <code>git bisect</code> to identify this commit in this particular example, I prepared the example in this way in order to deliver the essence of this command: finding the commit where the bug was first introduced fast.)</p><h3 id="Video-Demo"><a href="#Video-Demo" class="headerlink" title="Video Demo"></a>Video Demo</h3><p>For those who prefer looking at me trying to blaze through the commits, I recorded a video here:</p><div class="video-container"><iframe src="https://www.youtube.com/embed/mxFCW5OX4ig" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="Textual-Instructions"><a href="#Textual-Instructions" class="headerlink" title="Textual Instructions"></a>Textual Instructions</h3><p>For readers who prefer just reading, these are the steps to do it:</p><ol><li><code>git bisect start</code> will initiate the Git Bisect wizard. It might not look like anything happened, but if you type <code>git status</code>, it will show that you are currently bisecting</li><li><code>git bisect bad</code> to mark the current commit as bad</li><li><code>git log --oneline</code> and take the commit hash of the commit where the bug has not been introduced yet (finding a good commit)</li><li><code>git bisect good &lt;commit hash&gt;</code> to mark that commit as a good commit</li><li>Depending on whether the current one is good or bad, type <code>git bisect good</code>, else <code>git bisect bad</code></li><li>Repeat the procedure, deciding whether the commit is good or bad…</li><li>Until you finally identified the first bad commit!</li><li><code>git bisect reset</code> in order to exit the wizard</li></ol><p>We see how with a repository of 1000 commits, we managed to identify the violating bug in just around 10 steps! Of course realistically, you probably will not have to examine a range of 1000 commits to spot a bug. When I used it for my project, I had to examine at most around 30 commits which amounts to around 5 steps. But it gives an indication of how powerful the command is; you don’t have to worry about having a lot of commits because <code>git bisect</code> can go through it in very little time.</p><h2 id="Further-Discussions"><a href="#Further-Discussions" class="headerlink" title="Further Discussions"></a>Further Discussions</h2><h3 id="Alternatives-in-the-demo"><a href="#Alternatives-in-the-demo" class="headerlink" title="Alternatives in the demo"></a>Alternatives in the demo</h3><p>As mentioned earlier, in the example repository I gave, one can easily find the commit by simply checking when the file was introduced. Moreover, if you want to find out who made the change, one can also do a <code>git blame</code>.</p><p>However, <code>git bisect</code> is different. Consider a case like in the introduction section, when you discover regressions in the application. You have no idea which file or line of code caused it. You don’t even know what change caused it. All you know is that at some point in the past, this feature was working and now it isn’t. With <code>git bisect</code>, you can identify this first commit where the bug occurred, and also examine what changes were made in this commit.</p><h3 id="Modular-commits"><a href="#Modular-commits" class="headerlink" title="Modular commits"></a>Modular commits</h3><p>This <code>git bisect</code> command works best if your commit is modular. That is, you don’t make tonnes of changes in a single commit. Each commit is relatively small and clear in what changes it introduces. I personally prefer committing regularly, and I was very grateful that I did, allowing me to run <code>git bisect</code> on my repository to identify the commit that caused the regression.</p><h3 id="Prevention-is-better-than-cure"><a href="#Prevention-is-better-than-cure" class="headerlink" title="Prevention is better than cure"></a>Prevention is better than cure</h3><p>You might also want to adopt test-driven development or just write tests in general to prevent regressions. With a test suite set up, you will ensure that you don’t introduce bugs inadvertently. In my case however, the feature was rather difficult to test since it was a game (and frankly speaking, I had no time to write tests given the tight deadline of the project). </p><h3 id="Automated-Git-Bisect"><a href="#Automated-Git-Bisect" class="headerlink" title="Automated Git Bisect"></a>Automated Git Bisect</h3><p>The process of entering <code>git bisect good</code> and <code>git bisect bad</code> for each <code>checkout</code> can be very tedious. To automate this, there exists a <code>git bisect run &lt;script&gt;</code> feature, which runs a script in order decide whether the current revision is a bad or good commit. I will not be discussing this method in this post (partially because I haven’t used it myself), but I may be in the future!</p><h3 id="Assumptions-about-presence-of-the-bug"><a href="#Assumptions-about-presence-of-the-bug" class="headerlink" title="Assumptions about presence of the bug"></a>Assumptions about presence of the bug</h3><p>An assumption we are implicitly making is that once the bug appears, it stays all the time (before you squash it, of course). That is, we don’t want a scenario when the commit has an irregular history of: good -&gt; bad -&gt; good -&gt; bad. </p><p>In our discussion earlier, visualising the good and bad commits as “0”s and “1”s respectively, what we want is to have an array of “0”s followed by “1”s. We do not want to make it such that another “0” appear right after the consecutive “1”s, making the value not monotonically increasing anymore. In simpler terms, we don’t want to end up with an unsorted array, since we know that we are not able to run a binary search on an unsorted array.</p><h3 id="Try-an-implementation-for-further-understanding"><a href="#Try-an-implementation-for-further-understanding" class="headerlink" title="Try an implementation for further understanding"></a>Try an implementation for further understanding</h3><p>A similar problem on Leetcode is available if you’d like to try an implementation yourself - <a href="https://leetcode.com/problems/first-bad-version/">https://leetcode.com/problems/first-bad-version/</a>. Here, you can think of as the function given to you is the user inputting whether a commit is good or bad, and you are implementing the Git logic to halve the search range appropriately.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To summarise, here are the important steps that you need to do:</p><ol><li><code>git bisect start</code> to start the wizard</li><li><code>git bisect bad &lt;commit hash&gt;</code> to first show where there is the bug</li><li><code>git bisect good &lt;commit hash&gt;</code> to tell the wizard where the commit without a bug is</li><li>Keep typing <code>git bisect good</code> or <code>git bisect bad</code> depending on what the current commit is</li><li><code>git bisect reset</code> after you have identified the bad commit</li></ol><p>That story in the introduction wasn’t the only time I actually used <code>git bisect</code>. I have used this command at least 4 times throughout a single software engineering module.</p><p>For those of you who just discovered this command, I hope I managed to convince or at least give an idea of what <code>git bisect</code> can do. Perhaps you will find an opportunity to utilise it one day! (Although, I hope that you don’t have to do it because a bug was introduced)</p><p>For further reading, please refer to the Git Bisect documentation: <a href="https://git-scm.com/docs/git-bisect">https://git-scm.com/docs/git-bisect</a></p><hr><sup>1</sup> There are different implementations. Some implementations discard values strictly smaller than the middle element. But it is more important to get the general idea here<br><sup>2</sup> It is more accurate to think of commit history as a directed graph, especially when we consider merge commits. <br><sup>3</sup> The astute reader might be thinking at this point: "But you can't binary search on a linked list! How can this be allowed!". I must admit that you have a point. This is something that I am trying to research as well with not much luck. For now, I would believe that Git has provided the necessary infrastructure in their implementation to make a binary search possible. Should I find anything, I would update this blog!<hr>]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;The time is 7PM. Your software project is due at 11:59PM. You have yet to write the developer guide to document your software which is part of the submission. You are writing a testing plan which also serves as a guide for your graders to assess your software. As you were writing the steps to test, you discovered a regression. This feature that was working just 3 hours ago is now causing the application to crash! What happened? What would you do?&lt;/p&gt;
&lt;p&gt;I was in this exact situation recently for a school project. I had to decide whether it was worth identifying this bug and writing a patch for it (and potentially breaking other features for whatever reason it might be), or whether I should continue with the rest of the submission documents. I panicked really hard. In that moment of desperation, from a deep region in my memory, I suddenly recalled: &lt;code&gt;git bisect&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I had known the principle of &lt;code&gt;git bisect&lt;/code&gt; – it essentially performs a binary search for the first commit which caused a particular bug. It was going to be the first time I was using it. I quickly looked up tutorials and documentation online. 10 minutes later, I found the commit which caused the bug. Quickly patched it up (whether there were further bugs is another story altogether), and went back to writing my other submission documents.&lt;/p&gt;
&lt;p&gt;In that one usage, &lt;code&gt;git bisect&lt;/code&gt; easily became my favourite git command. In this post, I hope to provide a simple use case and guide to use &lt;code&gt;git bisect&lt;/code&gt;, while demonstrating how fast it can help you identify the violating commit.&lt;/p&gt;
&lt;p&gt;A basic understanding of data structures and algorithms (array/linked lists and linear/binary search) and git (e.g. committing, checking-out commits) is preferred, but I think the concepts are intuitive enough and I will try to make it as accessible as I can.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="https://chrisjwelly.github.io/blog/categories/Tech/"/>
    
    
      <category term="programming" scheme="https://chrisjwelly.github.io/blog/tags/programming/"/>
    
      <category term="algorithms" scheme="https://chrisjwelly.github.io/blog/tags/algorithms/"/>
    
      <category term="software engineering" scheme="https://chrisjwelly.github.io/blog/tags/software-engineering/"/>
    
      <category term="git" scheme="https://chrisjwelly.github.io/blog/tags/git/"/>
    
      <category term="binary search" scheme="https://chrisjwelly.github.io/blog/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>The CS2040S teaching experience</title>
    <link href="https://chrisjwelly.github.io/blog/2020/08/08/The-CS2040S-teaching-experience/"/>
    <id>https://chrisjwelly.github.io/blog/2020/08/08/The-CS2040S-teaching-experience/</id>
    <published>2020-08-08T09:41:24.000Z</published>
    <updated>2021-05-04T11:34:43.091Z</updated>
    
    <content type="html"><![CDATA[<!--toc--><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is a reflection that is quite overdue! I was a little busy throughout the May-July vacation period, and could only find time to update my blog now. Better late than never, I suppose! Just a warning though, there is a lot of text, and almost no pictures in this post.</p><p><a href="https://nusmods.com/modules/CS2040S/data-structures-and-algorithms">CS2040S</a> is NUS’ Data Structures and Algorithms course. Originally, there were only two variants of the module, CS2040 and CS2040C. The CS2040S variant is introduced this recent academic year (AY19/20) as a means for module management of the growing computing cohort (or so I heard). More specifically, it is compulsory for Computer Science undergraduates matriculating in AY19/20 to take this variant of the module. The module uses Java for the problem sets, but written exams allow usage of pseudocode.</p><p>This recent semester (AY19/20 Semester 2), the module is taught under Prof Seth Gilbert, Prof Ben Leong, and Prof Soo Yuen Jien (also known as Uncle Soo). Prof Seth does the main delivery of content, while Prof Ben and Uncle Soo handle the administrative matters of the module. The module does not always have the same lecturer(s). When I was taking the module in AY19/20 Sem 1, it was taught under Prof Harold Soh. Future semesters might also be different.</p><p>I was a teaching assistant (TA) who taught a weekly 2-hour tutorial (discussion group) sessions of 12 students. I’ll write about my experience in this blog, while making some comparisons with my experience teaching CS1101S in the previous semester. Take note that this post is not meant to be a review of the module.</p><a id="more"></a><h2 id="Making-of-and-Motivation"><a href="#Making-of-and-Motivation" class="headerlink" title="Making-of and Motivation"></a>Making-of and Motivation</h2><p>When I was teaching CS1101S in the earlier semester, there were some students who asked me whether I will resume teaching CS1101S, or try teaching more advanced modules. We joked that I could be a CS2040S TA and I will be seeing them again, since many people would take CS1101S and CS2040S in succession. At that point, my heart was set in either not teaching, or just teaching CS1101S (since I had my materials prepared already, why not?). I was pretty sure that I did not want to be a CS2040S TA. But here I am, writing this blog post.</p><p>It was a series of various events happening in the last few weeks of the semester (Week 13 and Reading Week) which eventually led me to decide to apply. For one, I was having lunch with my TA and some friends in Week 13, and that was when my TA recommended me to teach. Around that period too, emails by the department were sent out to inform students that the portal to apply for teaching positions was open. I was also going for internship interviews where some of the questions were algorithmic in nature. I thought it would be nice to continue revising my Data Structures and Algorithms. Finally, I was also curious on how the module would be like under Prof Seth, especially after hearing stories of the now-discontinued CS2020 (Data Structures and Algorithms Accelerated) and the graduate-level modules he taught. All of these factors combined together eventually led to my decision to apply for the TA position.</p><p>I emailed Prof Ben indicating my interest. I am not sure whether it is crazy or not, but at that point it was still Reading Week, and I was still taking CS2040S. That meant that when I was emailing Prof Ben, I had not even sat for my CS2040S finals. Unsurprisingly, Prof Ben, told me that we would have to wait for my results. He also asked for my transcript, and fortunately my results thus far were decent enough that I wasn’t immediately out of consideration. It was exciting, but also kind of nerve-wracking because to me it meant that my finals held more weight, and I felt more pressure to do well.</p><p>In the last few paragraphs of my <a href="https://chrisjwelly.github.io/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/">previous blog post on being a CS1101S Avenger</a>, I wrote this: “Would I be teaching CS1101S again in the future? Maybe. I’d love to. Actually, I indicated my interest to teach next semester, but it’s contingent on whether I get something else that is still pending. So, we’ll see!”. That ‘something else’ is actually my application as a CS2040S TA!</p><p>Fast-forward to results release, I was going to focus only on my CS2040S results, and fortunately I did well! It was quite surprising because I didn’t think that I did very well in the finals, at least not as well as my continuous assessment components. I think what was extra nice was that I did well for the semester as a whole, better than I had expected. Full of excitement, I sent my follow-up email to Prof Ben. I still remember that day, my Wi-Fi was down, so I used my mobile personal hotspot (I have a quota of 2GB per month) to access the relevant portals, screenshot my results, and send the email. For some reason, I almost used up all my quota (maybe because of background apps), but all that to send this application email!</p><p>Results release was on Christmas Eve, and that day night I was flying off to Japan for vacation. I was of course excited for the trip, but I couldn’t get the thought of applying for the role off my head. I kept checking my emails anxiously waiting for Prof Ben’s response. It was Christmas Eve and Christmas, so naturally he would not be working. That was my only consolation whenever I did not receive a reply hahaha. The response finally came on the 26th and spoiler alert, I got the job! I was really nervous and excited, but I looked forward to being a CS2040S TA in the semester.</p><h2 id="CS2040S-in-the-semester"><a href="#CS2040S-in-the-semester" class="headerlink" title="CS2040S in the semester"></a>CS2040S in the semester</h2><p>Compared to back when I was teaching CS1101S, I might have not started off teaching CS2040S with as many goals and teaching structure in mind. But of course I generally still had certain things planned out. I wanted to learn more about Data Structures and Algorithms, and reinforce my knowledge of them. I also wanted to ensure that my students would at least be comfortable with the basic contents. Deep down, I also know that I enjoyed teaching the freshmen cohort then, from my experience in CS1101S. So in a sense, I also wanted to follow them in their journey, like a guide.</p><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><p>I continued preparing slides as I did back in CS1101S. I think in CS2040S, there is really much room where having slides really helped in conveying the ideas. Especially in terms of showing examples of how an algorithm executes, e.g. sorting algorithms. I think preparing slides also helped me structure the flow of my classes, and it can also serve to remind me of some of the things that I want to say in the class.</p><p>Unfortunately, preparing slides takes up a lot of time. My preparation is actually as early as before the semester started. I know sorting algorithms and Binary Search Trees would most definitely be covered, so I had prepared the slides for these two topics before the semester started, but it was not enough. There were times when I stayed up to 3AM (I usually try to sleep by 12AM) just to prepare my slides, and there was even a time when I was still editing and adding content to my slides just minutes before my tutorial started. It is difficult to juggle the work with my own school work, and there was even a time I wanted to let go of having detailed slides so I could focus on my studies. Fortunately though, I had received help from some other TAs. I borrowed the contents of their slides and used their diagrams with permission, and I am thankful for that. Perhaps this reminded me that I am not alone in all this, and it is all right to seek help from others. At the end of the day, it’s about giving a good learning experience for the students.</p><p>Despite struggling in striking a balance, I might have had too much fun preparing some slides. This is one of the fun slides I had (that’s my face btw). I’m not sure what I was thinking when I prepared this, but the inner machinations of my mind are an enigma:</p><img src="/blog/2020/08/08/The-CS2040S-teaching-experience/fun-cs2040s-slide.png" class="" title="A slide to illustrate one of the questions on partitioning"><p>The materials I have shared with my students can be found <a href="https://tinyurl.com/cs2040s-ay1920s2-christian">here</a>. For future students reading this, do take note that content may differ. More on the course content in a subsection below!</p><p>Going on to the tutorial questions I have to go through, some of the questions on the data structures and algorithms I already knew were reasonably difficult. Not to mention, there is also additional content which I had to learn during the module itself. These questions challenged me, and truth be told, I could not answer some of them the first time I saw them.</p><p>Every week, what I would try to do is to sit down and attempt the tutorial questions myself first. It’s quite frustrating sometimes, and I feel slightly ashamed that as a TA I was not able to solve some of the questions. But I suppose, that’s where I got value out of being a TA - I too get challenged and grow as both a TA and a CS student. Another reason why I spend some time doing this is to ensure that I can explain my thoughts to some students as well. More often than not, there are multiple valid solutions to a problem. I also want to identify some potential common mistakes early, so I know how to respond to them when asked in class without spending too long thinking.</p><h3 id="Teaching-in-class-tutorials"><a href="#Teaching-in-class-tutorials" class="headerlink" title="Teaching in-class tutorials"></a>Teaching in-class tutorials</h3><p>The tutorial-teaching experience was also slightly different from CS1101S. In CS1101S, we would sit in a circle with just a monitor for me to present my content. It was much more like a discussion group back then. However, in CS2040S, I got a classroom that pretty much made it like a regular teacher-students setting (although I did try to make it more like a discussion group). It was quite nerve-wracking at first, as I had to stand in front of the class in front of 12 students. I was also not used to this kind of teaching. Not to mention that there were several technical hiccups at first. Simple things such as using the projector, and even putting down the screen was a little struggle at first. I still remember during the first tutorial, I made the projector work by turning it off and on again, hahaha. Classic.</p><p>Another key difference is that now there is much space to move around, and it is not easy to walk around while controlling one slide to the next. For the first tutorial, I used my wireless mouse in order to overcome this, but it is limited in the sense that I could not use the Google Slides pointer feature effectively, nor could I go back a slide if I overshoot (unless I place my mouse on a flat surface and click on ‘previous’). I bought a clicker online, and this turned out to be one of the best investments I made. It has a laser pointer, and on top of that it also has a feature to blank the screen. </p><p>However with all that, there were some things that I could not present on the slides as well as I had hoped, and I had to turn to the whiteboard. To be honest, I think whiteboard-ing to teach is a skill by itself, especially if it is done impromptu. Things like space-management and ensuring visibility to everyone in the class are some factors that I tried to be conscious about. For my class, we have a mini whiteboard by the side, so I was able to use that one instead of lifting my projector screen. Pretty nice! On a small sidenote, the teaching markers in the room are horrible. Some TAs joked that the whiteboard in the room is like a graveyard of markers, because all ran out of ink. I resorted to buying my own set of whiteboard markers, and this also turned out to be one of the good investments I made as not only it helped me in teaching, but it also helped me in my own work too. For example, discussing group projects and working out a solution to a challenging question.</p><p>Beyond the classroom experience, I also chose a seemingly-undesirable slot of Friday 4-6pm. While I recognise that students might not like this slot at all, I chose this slot because this is the only slot when I have some free time after class to answer questions. As a TA, I think it is important to be available for your students outside class hours as well, and from my CS1101S experience, one of the best times to do so is right after class. That is why I was willing to take up this slot. Another partial reason was because I was hoping that I could go for a meal after class with some of them to get to know them better, like I did with my 10am-12pm timing back in CS1101S. Unfortunately, this never happened; it was too big a group and it was a little bit awkward to ask. However, I did manage to make use of the fact that I am free after class quite a lot. For several weeks, I spent some 30 minutes after class to attend to some queries. For starters, some of the tutorial questions might not be very clearly conveyed the first time I did it, and I would spend more effort in trying to make sure that I explain better the second time. Sometimes I would also help clarify the lecture examples, and things like proofs. Since only a few of them would stay back, this also allowed me to ensure that I can suit my pace to their needs.</p><p>I’ll now talk about how I conduct classes. Firstly, it is quite fortunate that most (if not all) of my students were willing to stay for the entire 2 hours. Perhaps it helped that I was teaching the last slot of the week. So I usually structure my class in the following way:</p><ul><li>The first 5 minutes to wait for latecomers. I would also use this time to interact a little with them and check up on them.</li><li>25-30 minutes of content review. This is usually relevant to the topic for the day. I strive to finish by the 30-minute mark but this varies by topic.</li><li>Another 30 minutes of discussion time. I would ask them to go into small groups and discuss the questions. I think this duration of time is important for me to gauge how comfortable they are with the material, and it also allows the people who have not attempted to at least be familiar with the questions. As a side-effect, it also allows the students to interact with their peers. I have seen friendships formed from interactions in the class and I thought that was really nice. Also at first, I didn’t assign questions to groups, but later received feedback that it might be more effective that way. I started doing that and I think at least some of them found something to focus on.</li><li>The remaining ~1 hour will be used to go through the tutorial questions. Unlike in CS1101S, I did not have time for them to present to the board (and a bigger audience might mean they are more shy). But I generally would allow them to share their ideas, and comment on it before I reveal what solutions have been prepared by the teaching team.</li></ul><p>I would like to think that this format is quite ideal and helpful so that they would at least get something out of the class. I had a student who came in my Binary Search Tree (BST) class never having watched the lecture, and I think he at least got the basics of my BST through my recap session.</p><p>Often times, I was unable to cover all the questions in the tutorial. While this might be a concern, I personally think that it is better that they understand a good portion of the questions really well. I also value giving them discussion time to tackle the problems rather than me doing all the work potentially explaining all the questions, but leaving them confused due to pacing or information overload.</p><h3 id="Teaching-online-tutorials"><a href="#Teaching-online-tutorials" class="headerlink" title="Teaching online tutorials"></a>Teaching online tutorials</h3><p>What I shared so far were things related to conducting physical classes. I taught in the first semester affected by COVID-19. Most of my tutorials were physical, except for the last 2 tutorials when it became compulsory to go online. I was not against going online, I just much prefer to have physical classes because there was whiteboard support and I get to gauge their reaction in person. To prepare for my first lesson using Zoom, I had tried out the features with my friends and ensured that I was somewhat familiar with it first. Another TA was kind enough to lend me his Wacom so I could at least draw on Zoom if I needed some form of whiteboard support. Going online also meant that it was even more crucial for me to prepare good slides so that I don’t have to resort to drawing when I can. As I have shared before, this takes time and it was difficult that the online classes happened during the week when all the submission deadlines bunched together.</p><p>Moving on to my first Zoom class, I think it was quite fortunate that I got to know them pretty well already by then. I had requested them to switch on their video cameras, and they were fine with that. Though one thing I cannot get used to is the deafening silence while I am going through the content because everyone is muted. I did ask them to speak up if they have any questions. While most of the time they didn’t speak, they did communicate over the chat, which I suppose is good enough!</p><p>Discussion became quite tricky though, and I tried to use the breakout room feature. This worked generally quite well, but a limitation for the class size I had last time was that I could not assign them into the groups they are comfortable with (which I think is okay), and had to assign them in random groups to save time. But the most major difficulty is I cannot be present in all the groups at the same time. I kept jumping left and right during the breakout room sessions. I also don’t know which group might require my help (I heard Zoom has a feature to signal the host from within the breakout room, but I haven’t tried it yet). Another difficulty is that at least one person in the group had to take the initiative to start the discussions. So this really depended on who is in which breakout rooms.</p><p>Overall, I think conducting online classes is much more challenging than physical classes. For some reason, it is much more draining as well, and there is minimal face-to-face interaction which is one of the things I enjoyed while teaching. I don’t think online classes are going away anytime soon, and we have no choice but to get used to it. </p><h3 id="Module-content"><a href="#Module-content" class="headerlink" title="Module content"></a>Module content</h3><p>Moving on to the course implementation by itself. Aside from tutorials which cover the “standard” content of CS2040 variants, there are also recitations taught by the Professors and Graduate students which can cover content not usually found in a regular CS2040 syllabus. Some of the content covered are (a, b)-trees, B-Trees, Merkle Trees, Rolling Hash Functions, etc. These are things that I almost never got to touch before (except for B-Trees). As much as I would like to learn them as well, my time during the semester was really limited. If I do decide to teach under Prof Seth again in the future, I do plan to ensure that I would be prepared for these topics as well.</p><p>Just by covering the tutorials, I had to learn more things as well! Some of the new things I had to teach were Skip Lists, Tries, and Boruvka’s Algorithm for Minimum Spanning Trees. Since I had not learnt them prior to the module, I joked with my students that some of them might even know the topic longer than I do (if they had watched the lecture before I did). I hope they did not find it weird or anything that the TAs are just learning the topic though!</p><p>The CS2040S content covered by Prof Seth is overall much more rigorous than the other implementations of CS2040/S that I am aware of. I still learnt a lot as a TA, and I think students taking CS2040S in this particular semester would be quite well-prepared for more advanced algorithm classes. However, I feel that the course might be slightly too fast-paced. I have seen many students struggling to keep up. I do wonder whether the rigour of the module should be kept as it is for future iterations, but I’d say keeping it like this would show the potential intensity of computer science as a major to the students. </p><h3 id="Checking-setting-up-and-grading-problem-sets"><a href="#Checking-setting-up-and-grading-problem-sets" class="headerlink" title="Checking, setting-up, and grading problem sets"></a>Checking, setting-up, and grading problem sets</h3><p>As for the administrative matters, TAs are sent on rotation to set-up and check problem sets. I was sent pretty early on to check the second problem set on binary search. The problem set was pretty fun, though I faced some hiccups in the beginning because binary search is always tricky to write. I was also assigned to set-up the problem set on Markov Models. I am not sure what the problem set was for, but it seems like it was meant for students to practice writing code using hash maps. It was a fairly easy problem set, so setting it up was not difficult either and I had fun setting some test cases. I might be called evil for this but I was happy when students couldn’t pass some of the edge cases I had set, hahaha. It could have been the joy that at least the test cases I had prepared were not very weak. I’m sorry to those students! Also luckily for me, I was tasked to set this up during recess week, so it did not really clash with midterms week. I mostly improved the wording of the PDF, and my student gave me feedback that instructions were quite clear! I spent at least a day or two off my recess week which was critical to prepare for my own midterms to set up the problem set, so I’m really glad to hear the effort paid off.</p><p>All in all, there were 9 problem sets and most of them are fine, save some problem sets which had really tricky implementations. Every TAs are tasked to mark for their own classes, so for every problem set, I need to grade 12 students. I will just straight up say that grading is not that fun. It is easy to grade those that are obviously correct, but sometimes there are implementations that are not very well-written. It would fall in this grey zone where even after looking at the grading scheme, I would still have to think really hard. Not to mention, the platform Coursemology we are using does not really capture the time complexity well. A linear search implementation still passes when we are expecting a binary search. So, I have to do an analysis of their own solution.</p><p>Thinking about it now, I might want to ask future students to give a runtime analysis of their own implementation. That way, they get to practice studying their own solutions, and I get to identify potential gaps too. Another thing that I think I could have done better is in the comments I gave. Most of the working implementation is only given “Good job!” or something like that. It shouldn’t hurt to be more critical of their implementations and give proper suggestions for further improvements. This is something that I think I should be working on in the future.</p><h3 id="Going-above-and-beyond"><a href="#Going-above-and-beyond" class="headerlink" title="Going above and beyond"></a>Going above and beyond</h3><p>On top of all of these standard responsibilities as a TA, I try to do slightly beyond. For one, I make sure that I am as readily available as I can, and this is through setting up of Telegram groups. I heard that several TAs don’t even give out their contacts (I respect their privacy should they do that, though), and it made it difficult for their students to contact them. I don’t want such an experience for my students. However, learning my lessons from teaching CS1101S, I tried to be less prompt in my replies. This is for several reasons, first of all being that I am also a student and I cannot possibly attend to all 12 students all the time. The other reason is that I feel that sometimes after asking your TA questions, magically you would gain some more insights which allow you to solve the problems. So I would rather give them some time to think about what they asked before replying. This worked surprisingly well, because I have had situations when they would then add on that they have resolved whatever problem they had!</p><p>Same as in CS1101S, I would encourage my students to discuss in my Telegram group rather than messaging me directly. I would accept direct messages, but if I find something worthy to be discussed in the group, I would encourage them to send it to the group instead. Again, this helps free some time for me, and everyone gets to learn from the discussion. However, this only works if the others are willing to participate in the discussion as well. I was fortunate that my CS2040S students are very participative, and it made my life much easier. </p><p>Something interesting that happened is that 2 other TAs are also in my Telegram group, and they have been helping me a lot in answering some questions. I am really grateful for that! I do hang with some of the other TAs, but when I first started teaching, never would I imagine having other TAs in the Telegram group. I definitely learnt a lot from them too.</p><p>One thing I did throughout the semester is that I would attend the lessons from other TAs and learn from how they conduct the tutorials. It is quite advantageous that my teaching slot is on Friday on the last slot, so I am able to attend some classes on Thursday and make further preparations for the following day. It helped me prepare for several of the more challenging topics, and it helped me identify some possible questions which might get thrown during the lesson.</p><p>I also spoke about the short sessions I would have after my class earlier on, and I actually conducted one full-day consultation session the weekend before their midterm exam. I opened this for anybody to come, and even invited my ex-students from CS1101S. Funnily enough, at one point there were more people not from my class than people actually from my class. That was a pretty tiring session, but I am glad that I could at least do something for them. I would have done the same for finals if not for COVID-19, but I did manage to hold one 2-hour (which eventually stretched to 3, haha) session over zoom the week before their finals.</p><p>Unfortunately, there were some things which I had to cancel due to the pandemic. One little thing I did in the first tutorial session is to give them cards for them to write to themselves, which I would have returned to them in the final tutorial. At the time of writing, I still hold on to their cards because I was unable to meet them in person in the last few weeks of school. So I have to make do by taking pictures of their cards and sending to them personally over Telegram.</p><p>Back in CS1101S final tutorial, I held a Pizza party for my class. I would have done it too but this didn’t happen either for CS2040S once we had to move online. The last thing which I felt was a pity it didn’t happen due to COVID was a final-tutorial game that my own CS2040S TA and I wanted to do. When I was a student, he conducted this game during the final tutorial, and this time around he proposed co-hosting it with me for my class. I was really looking forward to it, but unfortunately it could not happen. Oh well..</p><p>Speaking of my TA, I think it was also interesting that I was also working as a TA together with people who had been TAs when I was a student. Two of them were my actual TAs, and several others were TAs I had received some help from. I definitely still respected them, but all in all it was quite an interesting experience. It was something I did not really feel back when I was teaching CS1101S, as my own TAs weren’t teaching when I taught and I did not really know the other senior TAs.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>All in all, aside from the hiccups due to COVID-19, I think it was a fantastic experience I had teaching CS2040S. I get to review some of the things I had learnt, while getting to learn some new cool things as well! I also got to know some of my students better, and I still talk to some of them even after the semester ended. It’s also definitely a different experience to teach a different module and to work under a different professor.</p><p>One little thing I realised is that is I am much more comfortable discussing the algorithm ideas ala conducting tutorials / discussion groups. I don’t think that coding the algorithm itself might be something I am strong in (and I am ashamed to say this as a TA). Another thing is that during tutorials, I would find it difficult to counter suggestions from students sometimes. These are usually solution proposals that I am very sure would be wrong, but I couldn’t come up with a counterexample fast enough. However, I will definitely work on this, so that I can be a better TA in the future!</p><p>Like last semester when I was teaching CS1101S, I think I might have spent and dedicated too much time in this craft. But at least judging from the feedback I received at the end of the semester, I would like to think that all my efforts weren’t for naught! Students from other classes have also dropped by my class several times, and this was especially convenient during the online tutorial period as they could just enter through the Zoom link. This is quite reassuring to me as it meant that people were willing to listen to me ramble, and gave me confidence that I’m doing something right. I spoke to one of my (actual) students, and she told me that she wasn’t even sure who her actual classmates were anymore, hahaha.</p><p>Admittedly, I feel pretty drained, and I have chosen to take a teaching break in the upcoming semester (AY20/21 Semester 1) in order to focus on my own studies and pursue other things. However, I don’t see myself stopping from teaching. Perhaps I will still be assisting people from the sides, but just not officially as a TA! Perhaps in the future I would also like to come back to teach CS2040S under Prof Seth again. But then again, plans often change, just like how I initially did not want to teach CS2040S. So I suppose we will see soon enough!</p><p>To wrap up this post, I would like to give thanks to all my students (both official and unofficial) for making my experience really enjoyable! I also owe a lot to the other TAs whom I have received help from throughout the semester. It’s been a memorable semester! I took this screenshot of my Zoom class before the semester ended; too bad we couldn’t take a picture in-person:</p><img src="/blog/2020/08/08/The-CS2040S-teaching-experience/cs2040s-tut32-ay1920s2.jpg" class="" title="My CS2040S (Zoom) tutorial in AY19&#x2F;20 Sem 2"><p>It’s yet another long post, and whether you have read through the entire monstrosity of the text or just few sections, thank you very much!</p>]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is a reflection that is quite overdue! I was a little busy throughout the May-July vacation period, and could only find time to update my blog now. Better late than never, I suppose! Just a warning though, there is a lot of text, and almost no pictures in this post.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nusmods.com/modules/CS2040S/data-structures-and-algorithms&quot;&gt;CS2040S&lt;/a&gt; is NUS’ Data Structures and Algorithms course. Originally, there were only two variants of the module, CS2040 and CS2040C. The CS2040S variant is introduced this recent academic year (AY19/20) as a means for module management of the growing computing cohort (or so I heard). More specifically, it is compulsory for Computer Science undergraduates matriculating in AY19/20 to take this variant of the module. The module uses Java for the problem sets, but written exams allow usage of pseudocode.&lt;/p&gt;
&lt;p&gt;This recent semester (AY19/20 Semester 2), the module is taught under Prof Seth Gilbert, Prof Ben Leong, and Prof Soo Yuen Jien (also known as Uncle Soo). Prof Seth does the main delivery of content, while Prof Ben and Uncle Soo handle the administrative matters of the module. The module does not always have the same lecturer(s). When I was taking the module in AY19/20 Sem 1, it was taught under Prof Harold Soh. Future semesters might also be different.&lt;/p&gt;
&lt;p&gt;I was a teaching assistant (TA) who taught a weekly 2-hour tutorial (discussion group) sessions of 12 students. I’ll write about my experience in this blog, while making some comparisons with my experience teaching CS1101S in the previous semester. Take note that this post is not meant to be a review of the module.&lt;/p&gt;
    
    </summary>
    
    
      <category term="University" scheme="https://chrisjwelly.github.io/blog/categories/University/"/>
    
    
      <category term="teaching" scheme="https://chrisjwelly.github.io/blog/tags/teaching/"/>
    
      <category term="university" scheme="https://chrisjwelly.github.io/blog/tags/university/"/>
    
      <category term="programming" scheme="https://chrisjwelly.github.io/blog/tags/programming/"/>
    
      <category term="CS2040S" scheme="https://chrisjwelly.github.io/blog/tags/CS2040S/"/>
    
      <category term="data structures" scheme="https://chrisjwelly.github.io/blog/tags/data-structures/"/>
    
      <category term="algorithms" scheme="https://chrisjwelly.github.io/blog/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Reflections on being a CS1101S Avenger</title>
    <link href="https://chrisjwelly.github.io/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/"/>
    <id>https://chrisjwelly.github.io/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/</id>
    <published>2019-12-19T12:58:13.000Z</published>
    <updated>2021-05-04T11:34:43.083Z</updated>
    
    <content type="html"><![CDATA[<!--toc--><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In NUS, <a href="https://www.comp.nus.edu.sg/~cs1101s/">CS1101S Programming Methodology</a> is the introductory course to programming for CS freshmen. It uses the <a href="https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs">Structure and Interpretation of Computer Programs</a> textbook, which is adapted to JavaScript (it was recently <a href="https://news.ycombinator.com/item?id=21779397">announced</a> that the adaptation is going public!). The course itself is actually taught by using a subset of JavaScript called Source, written and developed by the teaching team together with some students. I am aware that there are many undesirable things in JS, and Source aims to mitigate that by “providing the good parts”. That way, freshmen can still learn fundamentals of programming without having to learn the intricacies of the actual JS. </p><p>The module has been taught by Assoc Prof Martin Henz and Dr Low Kok Lim for several years now. Traditionally, it used to be an optional 5-Modular Credits module, slightly more workload compared to a standard 4-MC module. As of AY18/19 (the year I matriculated), it became a compulsory 4-MC module for CS freshmen. </p><p>Avenger is a term used in the module to refer to the tutors, usually undergraduates. A tutorial<sup>1</sup> class in CS1101S usually comprises of 6 to 8 students (only!), and led by an Avenger which serves the role of facilitating discussions. Perhaps they are best described as ‘Discussion Group Facilitators’. But hey, that’s a mouthful, and an ‘Avenger’ does sound way cooler!</p><p>In AY19/20 Sem 1 (Fall 2019), I took up the role of an Avenger. I led a discussion group of 6 students (initially it was supposed to be 8 but there was some reshuffling around). It’s been a super busy semester, and I would like to share my experience on being one. If you are a student contemplating on whether to apply on being an Avenger, hope this post can help provide you with some insights!</p><p>Actually, during the holiday break prior to the sem, I also worked as an Avenger for <a href="https://sws.comp.nus.edu.sg/2019/Computational%20Pearls%20with%20Functional%20Programming.htm">SWS3012</a>, which is a 2-week Summer Workshop for visiting international students, taught with condensed CS1101S material. Due to this exposure, Prof Martin asked if I was willing to be an “Avenger Mentor” to mentor the new Avengers once the sem took a full swing. I took up this role. I will briefly talk about these 2 experiences as well.</p><p>This post will <em>not</em> be a review of the module, but rather a reflection on my experience as an Avenger, as well as my personal approach to being one. </p><hr><sup>1</sup> A tutorial class in CS1101S is called a 'Studio'. For readers who are not from CS1101S background, I will try to stick to the term 'tutorial' in this blog.<hr><a id="more"></a><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Let’s start by talking about why I decided to take up the role.</p><p>I actually came into CS with barely any background. As I was taking the module, I was rather so-so at first. I could grasp the basics of recursion (which is pretty central to the module), but could not solve the advanced problems easily. It was only closer to midterms when I was attending Eldric’s (a graduate teaching assistant) remedial session on trees that I felt everything suddenly clicked. I realised how powerful the concept of “Wishful Thinking” was, and I would say that my skills improved quite significantly since. </p><p>The module is by no means easy, and throughout the module I would discuss numerous things with friends. I would get questions, and explain them as best as I can. Over time, several of my friends reaffirmed my ability in teaching and started saying that I should be an Avenger. I laughed off the idea at first because I didn’t think I was ready to take such an important role, but all the support I received really really started encouraging me. My own Avenger Hieu also recommended me, which truly gave me the push I needed. Closer to the end of the semester, I was determined to be an Avenger. </p><p>I do really enjoy teaching and sharing my knowledge with others. It brings me so much joy whenever I managed to bring someone closer to understanding. I suppose it’s also a personal satisfaction knowing that I know the material well enough to explain it to others. It’s just that I was unsure whether I have what it takes to take up this role. So, all the encouragements I received played a huge part in my decision. Thank you everyone, for encouraging me!</p><p>Fast forward to the next semester, I applied and prepared hard for the interview. Truthfully, it felt like it was such a long time since I wanted something really badly. I practised teaching using a whiteboard so hard, that I actually strained my arm a few days before my interview! I found it painful to lift up my arms. I was pretty worried, but fortunately the interview went well. I was fully ready to support my right arm with my non-dominant left hand throughout the interview, but somehow my arm didn’t give up on me and could support itself.</p><p>Spoiler alert, I was offered the role! I was really thrilled, and looked forward to the experience!</p><h2 id="SWS3012-and-being-Avenger-Mentor"><a href="#SWS3012-and-being-Avenger-Mentor" class="headerlink" title="SWS3012 and being Avenger Mentor"></a>SWS3012 and being Avenger Mentor</h2><p>Proceeding chronologically, what happened next was SWS3012. I happened to be relatively free during the summer period (or so I thought, but that’s another story), and I thought that before going full swing into teaching in the semester, why not give myself an exposure?</p><p>Honestly, it was quite challenging in terms of communication. The visiting students had a decent command of the English language. However, programming can get very technical, and I always had doubts whether what I wanted to convey went through. I think the experience reminded me to be patient when I teach.</p><p>There was also a student who was lagging in the summer workshop module, and he struggled in understanding his assignments. I tried helping him go through his work, but it didn’t seem to work well. Another Avenger also helped me out, but his approach was different: instead of going through the assignment, he went through very simple examples from scratch. It’s such a simple approach, but I overlooked it. I was too focused on helping him finish his work, that I didn’t think of going through the entire concept from scratch. I was reminded that I should seek for long-term rather than short-term goals when presented the opportunity.</p><p>It was short, but nevertheless a fruitful experience. Although the summer and actual module styles are different, I felt slightly more prepared to teach properly in the semester.</p><p>Here is a class photo we took at their farewell dinner:</p><img src="/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/sws3012-2019-studio.jpg" class="" title="The first class I am teaching as an Avenger in SWS"><hr><p>As mentioned before, I was also offered to be an Avenger Mentor, which is supposed to coach other “new” Avengers. I accepted the role, but I always felt it was weird for me to be in the position. I took the module together as classmates with the Avengers I am leading, so to say that I am “mentoring” them is a little strange. </p><p>That being said, I took the role of “leading” seriously. I ensured that I would answer the questions whenever I am capable, took initiative in things like writing meeting minutes, facilitated the discussion between fellow Avengers in my cluster, etc. </p><p>Thinking more deeply about this, I think what I went through is reflective of the working world: a team of Software Engineers may consist of members who are more knowledgeable than the one leading them, and that’s all right. What would matter was whether the leader could bring the best out of the members to achieve the same goal.</p><p>I am grateful to have been given this opportunity to lead. There was no form of official feedback given to Avenger Mentors, but I know I had tried my best and I can only hope that the Avengers in my cluster had a pleasant experience working with me and others.</p><h2 id="The-Avenger-work-in-the-semester"><a href="#The-Avenger-work-in-the-semester" class="headerlink" title="The Avenger work in the semester"></a>The Avenger work in the semester</h2><p>This should be the bulk of the reflection, yet I wrote so much already! Thank you for reading up to this point.</p><p>After everything that I have gone through, I generally had some goals I wanted to achieve when being an Avenger:</p><ol><li>Value-add my students’ understanding in the subject material</li><li>Ensure that my students grasp the concept of recursion early</li><li>Reinforce my understanding of the CS1101S material</li></ol><h3 id="1-Value-adding"><a href="#1-Value-adding" class="headerlink" title="1. Value-adding"></a>1. Value-adding</h3><p>I think this point should naturally be the goal of every Avenger. While I did not explicitly plan this out, I realise that I subconsiously took a two-pronged approach:</p><ol><li>Material preparation</li><li>Interaction in tutorials and consultations</li></ol><h4 id="1-1-Material-Preparation"><a href="#1-1-Material-Preparation" class="headerlink" title="1.1 Material Preparation"></a>1.1 Material Preparation</h4><p>Material preparation for me was mostly done in the form of slides. I provide my materials this semester <a href="https://www.tinyurl.com/cs1101s-1920-christian">here</a>. For future students who stumbled upon this post, take note that material covered is ever-changing. </p><p>Back when I was a student, my recitation teaching assistant Jin (we have 2 forms of “tutorials”, but I shall not go to details), prepared very detailed and helpful slides. I was very much inspired by him to do the same for my students. I e-mailed him when I was teaching SWS3012, and he kindly provided a detailed guideline to how he prepared his slides. I can’t thank him enough for that! It became some sort of reference for me, and I did use some of his old slides (with permission) to teach.</p><p>I prepared my slides with some things in mind:</p><ul><li>I want the slides to be mostly self-sufficient. Meaning, the students can refer to it without me needing to explain what I meant.</li><li>It should provide a deeper understanding of the module content</li><li>It needs some memes peppered in for the lulz</li></ul><p>I want my slides to be self-sufficient in order to protect my own time. I hope that my slides can answer some questions students may have, without needing to ask me directly. Of course, I don’t mind questions, but me being a student too means that I need some time for my own studies as well. </p><p>I also have urgency in mind. It works both ways; what if a student urgently needs some answers (30 mins before exams?), and I cannot answer readily? Or what if I can, but lack some proper material to do so? I do find that having prepared these slides beforehand made consultations easier because I already have personal materials that I need to cover something.</p><p>I try to share some tips and tricks to tackle certain things. For example, whether a Binary Tree is a Binary Search Tree can be easily verified if you were to “drop” all the nodes and check whether they are all in-order (i.e. perform an inorder traversal and check if the numbers appears sorted). Another thing I like to do is to provide visualisation through diagrams, because I feel that it will improve understanding. </p><p>Lastly, memes. Heavily inspired by my tutor Jin as well. But also because I want the slides to be more light-hearted. Studying can get very tiring, and the least I can do is to make the experience more pleasant. I either find memes online, or adapt CS1101S-related things to a specific meme format. Here are some examples I created (which most likely require you to be a student/Avenger to understand):</p><img src="/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/thricethrice-vs-substituter.jpg" class="" title="Higher-order programming can be traced by the Source Academy substituter!"><hr><img src="/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/source_evaluate_source.jpg" class="" title="In MCE, we use Source to evaluate Source"><p>Usually I release my slides at the end of my class, and share them to CS1101S students outside my class as well. Sharing is caring~</p><p>I personally feel that I have done a pretty good job in curating the slides. In particular, I was really proud of my <a href="https://docs.google.com/presentation/d/1NiGmkv17_QFGdOKpPZsfh08fBc2I4wos8WPSsJ0u0d0/edit#slide=id.g6fb76fb4b8_0_0">Meta-Circular Evaluator slides</a>. MCE is known to be a very hard-to-grasp topic, and I spared no effort in ensuring I can explain it well in my slides. What really thrilled me was that at some point, it reached 10 viewers simultaneously:</p><img src="/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/mce-ten-viewers.jpg" class="" title="Ten people were accessing my MCE slides"><p>While in a cohort-level that’s not a lot, but 10 people is more than the students I have! That was a personal satisfaction for me that people are actually using my slides.</p><p>If you look through my slides, I put a lot and a lot of effort in preparing it. I tend to prepare it on my long bus rides, or when I am unproductive in my own studies. For some slides like Environment Model and Meta-Circular Evaluator, I stayed up later than my usual sleep time to prepare them. Honestly, it started becoming an addiction! It also serves for me to ensure that I understand the material enough. In the end, it was pretty satisfying though as I think some students benefitted from it. I received this message from a student outside my class, which really really really made me happy:</p><img src="/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/slides-thank-you.jpg" class="" title="A message sent by a student outside my class"><p>One thing that I consciously tried to avoid was adding my answers to my slides. I want students to think for the solutions themselves, and I purposely omitted the answers to tutorial questions. However, what I eventually started doing was to add students’ answers. I think that having gone through the tutorial, students deserve to learn from the answers that their peers have come up with. I feel that students ought to have taken notes of discussions happening in class, and what I tried to do in my slides was to bring it up further since I can provide comments and remarks. I hope that my students did not become lazy in note-taking or stopped listening to their peers because of this, though. On hindsight, I should have asked how they felt about how I approached providing answers!</p><p>On top of all these, I try to provide some extra questions at the end of my slides. These questions either tend to be exam-like questions (I think the early tutorial questions did not reflect exam style, so I wanted to set expectations), or tricky questions to really test their understanding. Some of these are actually my original questions (if I recall properly), but a handful came from other sources such as questions I have seen online before, or an adaptation of questions from higher-level modules. I try to avoid asking questions from past year papers because I feel like I want them to experience those questions in a timed-practice setting, unless I feel the question is an important one.</p><p>By providing so much, I constantly wondered whether I am spoon-feeding them. It’s hard to thread a fine balance between helping just enough, and spoon-feeding. I argued with myself that CS1101S is an introductory module. Students new to programming are likely to require more help. Then I argued back that they should get used to being independent early. Eventually, I gave in to the former argument. I think there’s ample opportunity for them to be independent in their learning. I value that I am able to provide them with a good foundation instead. I do try to strike a balance when I can; I leave some thinking questions in my slides instead of providing everything. </p><p>If I were to teach another module, I am not sure how much effort I will be putting into my slides. What I know is that I will likely be preparing something supplementary for students to refer to. Perhaps, I will then revisit the earlier arguments about helping and being independent.</p><h4 id="1-2-Interaction-in-tutorials-and-consultations"><a href="#1-2-Interaction-in-tutorials-and-consultations" class="headerlink" title="1.2. Interaction in tutorials and consultations"></a>1.2. Interaction in tutorials and consultations</h4><p>When I was a student, my Avenger conducted the tutorial in a way that we begin by refreshing some concepts, followed by discussion among students, then presentation of answer by students. I adopted this style for my own class. All of this is to be done within around 1 hour 35 minutes, because tutorial slots are 2 hours long and we have to give students time to move to their next class.</p><p>With the help of my slides, I would be doing some form of revision with my students. This usually should not take more than 30 minutes, unless the topic is really packed. Then, I will let them break into pairs for discussions, giving them around another 30 minutes or so. I would walk around to follow their discussions, and answer questions which they may have. Finally, I would give them the opportunity to present their answers.</p><p>Revision is done simply because I think students don’t always come to class fully understanding what was gone through in lecture. I think the least I could do to ensure that they are not fully lost in class is to refresh their memories. Granted, the 2-hour long session made this possible. If it was a shorter slot, I may have to cut this out of the lesson plan.</p><p>I think breaking them into pairs and letting them actually discuss would make their learning more meaningful. When it was done to me, I felt my mind constantly engaged with my discussion partner. It’s either through learning something from the other party, or from reinforcing what I understand by explaining it. I did this to also allow students to have time to actually attempt the question if they haven’t already done so. Reflecting on my facilitation here, I think I could have done a better job going around. I realise I tend to just stand and wait, instead of actively listening in to their conversations. Although, I suppose I did not want to pressure them by being too nearby.</p><p>Lastly, I am quite insistent on letting the students present their answers. After having gone through one full round of being an Avenger, I truly believe that the best way to improve your understanding is by teaching others. I always assign a pair to question(s) for them to present. After their presentation, I open the floor for comments, and try to value-add the answers with my own thoughts. I am quite happy to say that the students I have are participative. There was only one studio session when I did all the answer explanations, and it was on MCE which can get very confusing. I am okay with helping out with that.</p><p>This is actually something that struck me pretty deeply during the Avenger interviews. Prof Martin shared that when Avengers pass the marker to their students to present, the students are being empowered. I couldn’t agree more with him; I feel that I am letting my students take charge of their learning. Avengers should strive to distance themselves away from the class. The focus of the class should not be on Avenger teaching, but rather on learning fueled by discussions.</p><p>Looking back, I didn’t have any complaints on how the class was conducted (maybe I got complaints in the teaching feedback but at the time of writing I haven’t received the feedback yet haha). I’d like to think that this style works. Although again, I believe that this heavily relies on the kinds of students I have in class. I have some strong students, and I can always rely on them to have a go at explaining the harder questions. In the future, if I were to conduct a similar style of class, I should be prepared for this not to work and to adapt accordingly. </p><p>As for consultations, what I try to do is to guide them towards the answers that they seek, instead of answering it directly. I ask a lot of “why”s, and a lot of “if you view the question like this, can you proceed?”. Admittedly, it gets a bit time-consuming because there is a lot of pauses. But their learning is what matters the most, so I hope it was beneficial. I think my record-long consultation was around 3-4 hours for a one-to-one consultation and I had this with several different students. Not sure how long is long, but I know tutors in other modules have gone through longer sessions than that. I admit it’s pretty tiring, but time really flies when you’re enjoying yourself.</p><p>Through all of these, I do hope that I have done much to value-add their learning.</p><h3 id="2-Teaching-recursion-early"><a href="#2-Teaching-recursion-early" class="headerlink" title="2. Teaching recursion early"></a>2. Teaching recursion early</h3><p>Recursion is arguably the most important tool at a CS1101S student’s disposal. A good majority of the questions can be solved with proper understanding of recursion, especially for midterms. I knew this through my experience as a CS1101S student. While this is seemingly a superficial goal, but I made it a point that my students should grasp this concept early.</p><p>On week 3, right after I met them for the first time, I offered to give a supplementary class on recursion. I wanted to make recursion very explicit for them. If you see the Google Drive for my slides, I had a <a href="https://docs.google.com/presentation/d/1Oa5cuPIQHukXwCNE7n39QT2FZuU5xXu62rDV5U5reNk/edit?usp=drive_web&ouid=101062236602867497167">slide</a> where I attempted to give an enrichment on recursion. This was actually the first set of slides I prepared before school even started, because I knew I wanted to do this. </p><p>The majority of the class agreed to this session, but finding a common time was difficult. In the end, I split it into 2 sessions, and each session was around 2-3 hours along. I thought I was pretty crazy when I started giving “consultations” even in week 3 of school, but I think this reaped its benefits closer to midterms. Some of them became quite natural with wishful thinking and recursion. Whether it was through my explanations or not, I don’t know. But at the very least, these “consultations” allowed me to get to know my students better, both as a person and in their abilities early in the module. </p><h3 id="3-Reinforcing-my-own-understanding-of-the-material"><a href="#3-Reinforcing-my-own-understanding-of-the-material" class="headerlink" title="3. Reinforcing my own understanding of the material"></a>3. Reinforcing my own understanding of the material</h3><p>As I have previously mentioned, I believe that teaching is the best way for someone to reinforce their understanding. It may or may not be the best way to start learning, but teaching definitely has its benefits. I was really really fascinated by wishful thinking and recursion. I couldn’t stop thinking about it even after my first semester ended. So when I applied to be an Avenger, learning more was definitely one of my goals. </p><p>For example, I started having more appreciation to how one can recursively generate permutations and subsets in functional programming. The cool thing that happened was the same week I had to teach permutations, I had to answer an online coding challenge on permutations for an internship application process. The expected solution was an in-place solution (with <code>O(n)</code> stack space I think?) by displaying every permutation, while the CS1101S style takes at least <code>n!</code> space. And although I couldn’t fully come up with the solution that they expect, I think through my experience in my CS1101S, I could grasp recursive solutions and dynamic programming problems better, which made interview preparations more pleasant.</p><p>I definitely understood Meta-Circular Evaluator better now that I had to teach it as compared to when I was a student. I honestly feared teaching it, some Avengers and I joked that the tutorial for MCE was going to be the tutorial that our ratings were to drop. But in the end, I think it didn’t go too badly. I was pretty surprised at myself for being able to answer consultation questions on the topic too. </p><p>Another cool thing I learnt along the way was the Continuation-passing style. Maybe I can’t fully teach it from scratch now, but I definitely started having a better appreciation of the concept. It’s definitely interesting to “continue” the function by passing it in the body of a newly-defined function. The gist of the concept is to turn a recursive function which gives rise to recursive processes (which is defined as the accumulation of deferred operations), to one that gives rise to an iterative process (tail recursive). I take the following <a href="https://sourceacademy.nus.edu.sg/playground#chap=1&exec=1000&ext=NONE&prgrm=GYVwdgxgLglg9mABBADgZwPoFMCOICGANgBQAeANIgJ6UQJQCUiA3gFCIeIBOWUIXSOmChlEAXgnUGAblYBfVq1CRYCZOgywAtljRlKNZPSZtO3Xv0H1RAKimyFS8NHiCNWmGBB6K1WsZZ2Th4%2BASNhUQBae3lFZRc1VExgfGg4LhgiYjB-YRMgjhDLdUxcAhIcxABGSgKzRAAjcQA%2BRrqzAH5wkSqGdvqOAC4SjA8vPUqa-oGzUhaRlLSMrIppmYHgeaTNGB0JymBcxgYTh0Vtxah0zJIAVko5sVbSGSA">example</a> from the lecture slides:</p><figure class="codeblock codeblock--tabbed"><figcaption><span>Continuation-passing style</span><ul class="tabs"><li class="tab active">JS</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is written in Source language</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Normal factorial</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> n === <span class="number">1</span> </span><br><span class="line">         ? <span class="number">1</span> </span><br><span class="line">         : n * factorial(n - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// CPS factorial</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cps_equal</span>(<span class="params">x, y, cont</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> cont(x === y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cps_times</span>(<span class="params">x, y, cont</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> cont(x * y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cps_minus</span>(<span class="params">x, y, cont</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> cont(x - y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cps_factorial</span>(<span class="params">n, cont</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> cps_equal(n, <span class="number">1</span>,</span><br><span class="line">    b =&gt; b</span><br><span class="line">         ? cont(<span class="number">1</span>)</span><br><span class="line">         : cps_minus(n, <span class="number">1</span>,</span><br><span class="line">             x =&gt; cps_factorial(x, </span><br><span class="line">               f =&gt; cps_times(n, f, cont))));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cps_factorial(<span class="number">5</span>, x =&gt; x);</span><br></pre></td></tr></tbody></table></figure></div></figure><p>I leave it as an exercise to the reader to figure out what is going on :P</p><p>When I was making an attempt on my own writing the above code, I did this:</p><figure class="codeblock codeblock--tabbed"><figcaption><span>A poor attempt at CPS factorial</span><ul class="tabs"><li class="tab active">JS</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cps_factorial_fail</span>(<span class="params">n, cont</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> n === <span class="number">1</span> </span><br><span class="line">         ? cont(<span class="number">1</span>) </span><br><span class="line">         : cps_factorial_fail(n - <span class="number">1</span>, x =&gt; x * cont(n));</span><br><span class="line">}</span><br><span class="line">cps_factorial_fail(<span class="number">5</span>, x =&gt; x);</span><br></pre></td></tr></tbody></table></figure></div></figure><p>The above example fails to be tail recursive, which I suppose is a purpose of CPS. </p><p>I also heard an argument that goes along the lines of CPS being a “cheat” to be tail recursive, because it actually trades stack space for heap space, which isn’t all that bad because we are likely to have more heap space anyway. Looks like I still have got some learning to do!</p><p>Before the semester started, I was pretty interested in Lambda Calculus as well. Imagine having a programming language where you can only declare and apply functions. But somehow, you can represent a lot of things with it starting from numerals, data structures, booleans, and even recursion. The higher-order programming feature of CS1101S meant that we touch a little bit on it, and there was even an optional homework assignment on this. Gave me quite a headache answering students’ questions on it, but I felt like I learnt a thing or two!</p><p>Lastly, I think the nicest thing about being an Avenger is being able to learn from your students as well. I learnt how people could approach a problem differently (and sometimes more elegantly), and not only that, I learnt from their positive attitudes as well. </p><p>I picked up this technique from one of my students, which I eventually used for an assignment in my algorithm class:</p><figure class="codeblock codeblock--tabbed"><figcaption><span>Nifty trick to target relative 2D coords</span><ul class="tabs"><li class="tab active">JS</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is written in Source language</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Suppose we want to check that the center element is strictly greater than all </span></span><br><span class="line"><span class="comment">its neighbours in the 8 directions */</span></span><br><span class="line"><span class="keyword">const</span> target = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                [<span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">                [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]];</span><br><span class="line"><span class="comment">// We can define two arrays to represent coordinate "offsets"</span></span><br><span class="line"><span class="keyword">const</span> dx = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>];</span><br><span class="line"><span class="keyword">const</span> dy = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Notice that the dx[0] and dy[0] combined will represent neighbour in the</span></span><br><span class="line"><span class="comment">north-west. dx[1] and dy[1] combined will represent north neighbour ans so on */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can thus define the check as follows</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">target</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> is_center_a_peak = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i = i + <span class="number">1</span>) {</span><br><span class="line">    <span class="keyword">if</span> (target[<span class="number">1</span> + dy[i]][<span class="number">1</span> + dx[i]] &gt; target[<span class="number">1</span>][<span class="number">1</span>]) {</span><br><span class="line">      is_center_a_peak = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    } <span class="keyword">else</span> {}</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> is_center_a_peak;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure><p>What I have above is a bit of a toy problem, but this can be generalised to many other cases. The nice thing about this method is its flexibility in defining the directions. For example, programming a Knight piece in chess. It may be slightly error prone in terms of whether you should access <code>dy</code> or <code>dx</code> first, but that aside I was pretty impressed by this technique.</p><p>Through this experience, I do realise that undergraduate teaching assistants shouldn’t be expected to know answers to everything. Every now and then it should be okay to learn something new from your students too (especially if they actually know more!). I certainly hope that students can understand where I come from. Afterall, I was a student just like them one year prior.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Phew! It is a super long post! Thank you very much if you have read this far. It’s been a truly busy semester. I think I have done so much work (and perhaps more than necessary), but I enjoyed every part of it! </p><p>Although towards the end my other modules actually suffered a bit, but I would like to think that it’s a relatively low price to pay if I could help the CS1101S students. (Actually, we’ll see if this thought still stands after my own results release this semester hahaha)</p><p>Many people have asked me whether it is time-consuming to teach. My answer to this is that going through the bare-minimum of teaching the tutorial, attending staff meetings, etc, shouldn’t actually take a lot of time. What I personally feel takes a lot of time is all the grading and consultations. Not to mention, all the short questions I received over chat actually amounted to quite a bit of time. Also for me personally, material preparation is one of the most time-consuming part of what I did in the semester. Perhaps I could have gone through the semester better if I hadn’t spent so much time on the materials, but that deviates from my goal of providing a good self-sufficient set of materials.</p><p>Going forward, I definitely can work on my time and priority management. Teaching is my responsibility, but perhaps it would be good for my own sake to learn to say “no” too. Maybe I’m sacrificing too much of my own well-being for others, which isn’t necessarily bad but I should be more mindful about it.</p><p>In the end, the Avengers received this Avenger pin which looks pretty cool in my opinion:</p><img src="/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/avenger-pin.jpg" class="" title="Avenger pin"><p>Before wrapping up this post, I would like to thank my students for making this journey really enjoyable! It’s been really really fun!</p><img src="/blog/2019/12/19/Reflections-on-being-a-CS1101S-Avenger/studio2A-ay1920s1.jpg" class="" title="My tutorial class in AY19&#x2F;20 Sem 1"><p>Would I be teaching CS1101S again in the future? Maybe. I’d love to. Actually, I indicated my interest to teach next semester, but it’s contingent on whether I get something else that is still pending. So, we’ll see! </p><p>And to wrap up, I’m going to use the phrase used to conclude CS1101S first lecture: May the Source be with you!</p>]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;

&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;In NUS, &lt;a href=&quot;https://www.comp.nus.edu.sg/~cs1101s/&quot;&gt;CS1101S Programming Methodology&lt;/a&gt; is the introductory course to programming for CS freshmen. It uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs&quot;&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; textbook, which is adapted to JavaScript (it was recently &lt;a href=&quot;https://news.ycombinator.com/item?id=21779397&quot;&gt;announced&lt;/a&gt; that the adaptation is going public!). The course itself is actually taught by using a subset of JavaScript called Source, written and developed by the teaching team together with some students. I am aware that there are many undesirable things in JS, and Source aims to mitigate that by “providing the good parts”. That way, freshmen can still learn fundamentals of programming without having to learn the intricacies of the actual JS. &lt;/p&gt;
&lt;p&gt;The module has been taught by Assoc Prof Martin Henz and Dr Low Kok Lim for several years now. Traditionally, it used to be an optional 5-Modular Credits module, slightly more workload compared to a standard 4-MC module. As of AY18/19 (the year I matriculated), it became a compulsory 4-MC module for CS freshmen. &lt;/p&gt;
&lt;p&gt;Avenger is a term used in the module to refer to the tutors, usually undergraduates. A tutorial&lt;sup&gt;1&lt;/sup&gt; class in CS1101S usually comprises of 6 to 8 students (only!), and led by an Avenger which serves the role of facilitating discussions. Perhaps they are best described as ‘Discussion Group Facilitators’. But hey, that’s a mouthful, and an ‘Avenger’ does sound way cooler!&lt;/p&gt;
&lt;p&gt;In AY19/20 Sem 1 (Fall 2019), I took up the role of an Avenger. I led a discussion group of 6 students (initially it was supposed to be 8 but there was some reshuffling around). It’s been a super busy semester, and I would like to share my experience on being one. If you are a student contemplating on whether to apply on being an Avenger, hope this post can help provide you with some insights!&lt;/p&gt;
&lt;p&gt;Actually, during the holiday break prior to the sem, I also worked as an Avenger for &lt;a href=&quot;https://sws.comp.nus.edu.sg/2019/Computational%20Pearls%20with%20Functional%20Programming.htm&quot;&gt;SWS3012&lt;/a&gt;, which is a 2-week Summer Workshop for visiting international students, taught with condensed CS1101S material. Due to this exposure, Prof Martin asked if I was willing to be an “Avenger Mentor” to mentor the new Avengers once the sem took a full swing. I took up this role. I will briefly talk about these 2 experiences as well.&lt;/p&gt;
&lt;p&gt;This post will &lt;em&gt;not&lt;/em&gt; be a review of the module, but rather a reflection on my experience as an Avenger, as well as my personal approach to being one. &lt;/p&gt;
&lt;hr&gt;
&lt;sup&gt;1&lt;/sup&gt; A tutorial class in CS1101S is called a &#39;Studio&#39;. For readers who are not from CS1101S background, I will try to stick to the term &#39;tutorial&#39; in this blog.
&lt;hr&gt;
    
    </summary>
    
    
      <category term="University" scheme="https://chrisjwelly.github.io/blog/categories/University/"/>
    
    
      <category term="teaching" scheme="https://chrisjwelly.github.io/blog/tags/teaching/"/>
    
      <category term="CS1101S" scheme="https://chrisjwelly.github.io/blog/tags/CS1101S/"/>
    
      <category term="university" scheme="https://chrisjwelly.github.io/blog/tags/university/"/>
    
      <category term="programming" scheme="https://chrisjwelly.github.io/blog/tags/programming/"/>
    
      <category term="functional programming" scheme="https://chrisjwelly.github.io/blog/tags/functional-programming/"/>
    
      <category term="SICP" scheme="https://chrisjwelly.github.io/blog/tags/SICP/"/>
    
      <category term="recursion" scheme="https://chrisjwelly.github.io/blog/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>(The true) Hello, World!</title>
    <link href="https://chrisjwelly.github.io/blog/2019/12/04/The-true-Hello-World/"/>
    <id>https://chrisjwelly.github.io/blog/2019/12/04/The-true-Hello-World/</id>
    <published>2019-12-04T13:53:57.000Z</published>
    <updated>2021-05-04T11:34:43.093Z</updated>
    
    <content type="html"><![CDATA[<p>Since by default, Hexo generates a hello world post, this shall be the true hello world from me. </p><p>So, Hello World! My name is Christian and I am currently a Year 2 Computer Science undergraduate at National University of Singapore. Actually, I just sat for the last paper of this semester (Year 2 Sem 1) this morning! </p><p>I am still getting used to the Hexo framework, so I shall leave this post as it is first and try to mess around first!</p><p>Update (13 Dec 2019): Still did not manage to get used to deployment, but I think I will resume my initial post. I do hope that the actual website will tell me when this post is last updated, but I included the time stamp just in case.</p><p>So perhaps let’s start a little bit about my motivation for blogging. I got this idea closer to the end of the semester (which was around 3 weeks ago?) when I was reading about this <a href="http://sijinjoseph.com/programmer-competency-matrix/">programmer competency matrix</a>. There, it is said that the highest level for the ‘blog’ category is when one maintains a personal blog of insights and thoughts. It did make me reflect on some things: throughout my ~1.5 years of CS, I have learnt so much and along the way I found things which worked for me and some which didn’t. There were some “aha!” moments, and what better way than to share it with others? </p><p>Another reason is also because I do enjoy writing and documenting my thoughts. I used to maintain a personal diary for travel purposes to remember and relive the moment. But making an entry during my travels became quite hard due to the fact that I only have so little time at the end of a day and not to mention the fatigue as well. I stopped eventually. Perhaps blogging which is more on typing would be more sustainable, although the nature of my diary and my blog seems pretty different. Which brings me to my next point:</p><p>What kind of content will I be including in my blog? I honestly do not know. I envisioned it to be more of my journey as a CS student. I definitely want to include my experiences with frameworks. I may want to include other non-CS related things as well, for variety purposes. I’m contemplating if I want to include module reviews and all, but I’m not sure. Most likely not, but we’ll see!</p><p>The blogging style is something that I have yet to establish as well. I think I want to make it more free-flow where I just pen (or type down, rather) my thoughts. For more serious/educational posts, I may make it more formal. Otherwise, I think I’ll keep it light-hearted. </p><p>Enjoy my blog!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Since by default, Hexo generates a hello world post, this shall be the true hello world from me. &lt;/p&gt;
&lt;p&gt;So, Hello World! My name is Chri
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chrisjwelly.github.io/blog/2019/12/04/hello-world/"/>
    <id>https://chrisjwelly.github.io/blog/2019/12/04/hello-world/</id>
    <published>2019-12-04T13:00:00.000Z</published>
    <updated>2021-05-04T11:34:43.093Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
